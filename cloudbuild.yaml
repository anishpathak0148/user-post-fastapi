steps:
  #Build the image
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['build', '-t', 'gcr.io/${_PROJECT_ID}/${_CONTAINER_NAME}:${_VERSION}', '.']
  #   id: 'build-image-myapp'
  #   waitFor: ['-']  # The '-' indicates that this step begins immediately.
  
  - name: 'docker/compose:1.29.2'
    args: ['up', '-d']
    id: 'build-image-myapp-docker-compose'
    env:
    - 'PROJECT_ID=${_PROJECT_ID}'
    - 'CONTAINER_NAME=${_CONTAINER_NAME}'
    - 'TAG=${_VERSION}'
    - 'SECRET_KEY=${_SECRET_KEY}'
    - 'ALGORITHM=${_ALGORITHM}'
    - 'ACCESS_TOKEN_EXPIRE_MINUTES=${_ACCESS_TOKEN_EXPIRE_MINUTES}'
    - 'POSTGRES_USER=${_POSTGRES_USER}'
    - 'POSTGRES_PASSWORD=${_POSTGRES_PASSWORD}'
    - 'POSTGRES_DB=${_POSTGRES_DB}'
    - 'POSTGRES_SERVER=${_POSTGRES_SERVER}'

  #Push the image to google container registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${_PROJECT_ID}/${_CONTAINER_NAME}:${_VERSION}']
    id: 'push-image-to-container-registry'
    waitFor: ['build-image-myapp-docker-compose']
  
  # Run the image on Cloud Run
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args:
  #   - 'run'
  #   - 'deploy'
  #   - '${_SERVICE_NAME}'
  #   - '--image'
  #   - 'gcr.io/${_PROJECT_ID}/${_CONTAINER_NAME}:${_VERSION}'
  #   - '--region'
  #   - '${_REGION}'
  #   - '--port'
  #   - '${_CONTAINER_PORT}'
  #   - '--platform'
  #   - 'managed'
  #   - '--allow-unauthenticated'
  #   env:
  #   - 'PROJECT_ID=${_PROJECT_ID}'
  #   - 'CONTAINER_NAME=${_CONTAINER_NAME}'
  #   - 'TAG=${_VERSION}'
  #   - 'SECRET_KEY=${_SECRET_KEY}'
  #   - 'ALGORITHM=${_ALGORITHM}'
  #   - 'ACCESS_TOKEN_EXPIRE_MINUTES=${_ACCESS_TOKEN_EXPIRE_MINUTES}'
  #   - 'POSTGRES_USER=${_POSTGRES_USER}'
  #   - 'POSTGRES_PASSWORD=${_POSTGRES_PASSWORD}'
  #   - 'POSTGRES_DB=${_POSTGRES_DB}'
  #   - 'POSTGRES_SERVER=${_POSTGRES_SERVER}'
  #   waitFor: ['push-image-to-container-registry']
  #   id: 'deploy-to-cloud-run'

  # deploy container image to GKE
  - name: "gcr.io/cloud-builders/gke-deploy"
    args:
    - run
    - --filename=./deploy/
    - --image=gcr.io/${_PROJECT_ID}/${_CONTAINER_NAME}:${_VERSION}
    - --location=${_ZONE}
    - --cluster=${_GKE_CLUSTER}
    id: 'deploy-to-GKE-cluster'
    waitFor: ['push-image-to-container-registry']

  #Update the container image using kubectl set
  # - name: 'gcr.io/cloud-builders/kubectl'
  #   args:
  #   - 'set'
  #   - 'image'
  #   - 'deployment/${_DEPLOYMENT_NAME}'
  #   - '${_CONTAINER_NAME}=gcr.io/${_PROJECT}/${_CONTAINER_NAME}:${_VERSION}'
  #   env:
  #   - 'CLOUDSDK_COMPUTE_ZONE=${_ZONE}'
  #   - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER}'
  #   id: 'deploy-latest-image-to-GKE-cluster'
  #   waitFor: ['push-image-to-container-registry']
  
substitutions:
  #GCP Specific configuration. Please DON'T change anything
  # If you don't pass _PROJECT_ID here then add this variable during creation of cloud build trigger.
  # _PROJECT_ID: YOUR_PROJECT_ID
  _PROJECT_ID: $PROJECT_ID # It will pick the current project id
  _ZONE: us-central1-c
  _REGION: US-central1
  _GKE_CLUSTER: user-post-cluster-dev

  #Repository Specific configuration. DevOps can change this settings
  _DEPLOYMENT_NAME: user-post-fastapi
  _CONTAINER_NAME: user-post-fastapi
  _SERVICE_NAME: user-post-fastapi-service
  _CONTAINER_PORT: '8080'
  
  # Developers ONLY change
  _VERSION: v1.1
    
options:
    substitution_option: 'ALLOW_LOOSE'